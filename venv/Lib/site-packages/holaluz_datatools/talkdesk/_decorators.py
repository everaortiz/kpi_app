import functools
import inspect
import logging
import time

ACCEPTED_REPORT_TYPES = [
    'acw_time_data', 'adherence', 'calls', 'contact_online_time', 'contacts', 'csat_score', 
    'explore_calls',  'feedback', 'hold_time_data', 'inbound_contact_volume', 'outbound_dialer_calls',
    'qm_evaluation_analysis', 'qm_evaluation_score', 'qm_interaction_details', 'ring_attempts',
    'studio_flow_execution', 'talk_time_data', 'user_status'
]

logger = logging.getLogger(__name__)

def use_defaults(func):
    """
    Decorator that retrieves the attributes of the object `cls`
    when the `kwargs` signature of method `func` are None and
    uses them to compute the result of `func(cls, **keargs)`.

    It raises `SyntaxError` if some `args` are passed to `func`
    """
    func_sig = inspect.signature(func)
    
    @functools.wraps(func)
    def wrapper(cls, *args, **kwargs):
        if args:
            raise SyntaxError(
                f'Use only keyword arguments when calling {func.__name__!r} method'
            )
        
        for arg_name, arg_value in func_sig.parameters.items():
            if arg_name not in kwargs and arg_name != 'self': 
                kwargs[arg_name] = arg_value.default
        
        for attr_name, attr_value in kwargs.items():
            if hasattr(cls, attr_name) and attr_value is None:
                cls_attr_value = getattr(cls, attr_name)
                logger.debug(f'using default value for self.{attr_name}: {cls_attr_value}')
                kwargs[attr_name] = cls_attr_value
        
        return func(cls, **kwargs)
    
    return wrapper

def refresh_token(func):
    """
    Decorator to refresh the session token, if necessary, when `func` makes 
    requests to an API.
    """    
    @functools.wraps(func)    
    def wrapper(cls, *args, **kwargs):
        if hasattr(cls, '_auth_token_expiration_time') and time.time() > cls._auth_token_expiration_time:
            logger.debug('generating new token')
            
            # we're not refreshing the token but generating a new one,
            cls._generate_auth_token()
            
        return func(cls, *args, **kwargs)

    return wrapper

def check_report_type(func):
    """
    Decorator to check that `report_type` is one of the accepted ones.
    """    
    @functools.wraps(func)    
    def wrapper(cls, *args, **kwargs):
        report_type = kwargs.get('report_type') or args[0]
        if report_type not in ACCEPTED_REPORT_TYPES:
            raise ValueError(
                f'`report_type` must be one of {ACCEPTED_REPORT_TYPES}, '
                f'but {report_type!r} was passed'
            )
            
        return func(cls, *args, **kwargs)

    return wrapper