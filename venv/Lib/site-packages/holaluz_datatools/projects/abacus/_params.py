import os
import datetime

from ...credentials import load_credentials

### _parser.py params ###
ACCEPTED_SQL_FLAVOURS = ['PostgreSQL', 'SQLServer', 'MySQL', 'SnowflakeSQL']
try:
    ACCEPTED_CREDS_KEYS = list(load_credentials())
except:
    ACCEPTED_CREDS_KEYS = [
        'bnw_read', 'clips_josep', 'core_read', 'core_read_better', 'ekon_read', 'hope_read', 
        'laravel', 'mysql_dw_read', 'mysql_dw_read_sc', 'mysql_dw_write', 'mysql_dw_write_sc', 
        'netquest', 'notion', 'rogue_one', 's3', 's3_main', 'slack_bi_integrator', 'slack_solar', 
        'snowflake_dw_people', 'snowflake_dw_write', 'snowflake_dw_write_better', 'tetraeder', 
        'walle_read', 'zoho_read'
    ]


### _notion.py params ###
HOLALUZ_SPACE_ID = 'b91fe70f-e708-482d-8d2a-5d4fbca58fec'

BI_METRICS_PAGE_TITLE = 'BI Metrics' # this page is a CollectionView block
BI_METRICS_PAGE_BLOCK_ID = '5747a1e4-8301-4f73-8e93-a653ab65cc1b'

BI_ALERTS_PAGE_TITLE = 'BI Alerts' # this page is a CollectionView block
BI_ALERTS_PAGE_BLOCK_ID = 'b0116e04-a68c-4bd6-8c3a-2ae9d9eb0c9a'

METRIC_DEFAULT_KWARGS = {
    'status': 'In use',
    'origin': 'File',
    'icon': 'üìù',
    'type': 'page', 
}
METRIC_ORIGIN_MSG = 'This metric is defined in the `{}` file.'


### _processer.py params ###
NOTION_CREDS_KEY = 'notion'
S3_CREDS_KEY = 's3'

S3_BUCKET = None # 'bi-abacus'
S3_METRICS_PATH = f'metrics/raw/{datetime.date.today().strftime("%Y%m%d")}/'
S3_ALERTS_PATH = f'alerts/raw/{datetime.date.today().strftime("%Y%m%d")}/'

SQL_FLAVOUR2CLIENT_MAP = {flavour: f'{flavour}Client' for flavour in ACCEPTED_SQL_FLAVOURS}

SF_SCHEMA = 'PUBLIC'
SF_METRICS_TABLE_NAME = 'ABC_DAILY_METRICS_FT'
SF_ALERTS_TABLE_NAME = 'ABC_DAILY_ALERTS_FT'

UPDATE_METRIC_QUERY = """
    update {schema}.{table_name}
        set {data_str}
        where date = '{date}'
"""

# accepts all dates formated as YYYY-MM-DD between 2000-01-01 and 2049-12-31
DATE_PATTERN = '^20[0-4][0-9]-((0[1-9])|(1[0-2]))-(0[1-9]|[1-2][0-9]|3[0-1])$'
DATE_FORMAT = 'YYYY-MM-DD'
MIN_ALLOWED_DATE = '2000-01-01'
MAX_ALLOWED_DATE = '2049-12-31'

# different date filtering cases that can be summarized as the following regex
# WHERE|AND <date_func>(<col_name>) (<operator> '<date>'|CURRENT_DATE())
DATE_FILTER_PATTERN = '(?:where|and)\s+.+?\s+([<>=]{1,2}\s*(?:\'\d{4}-\d{2}-\d{2}\'|current_date\(\)))'


### common params ###
DEFAULT_MODE = 'metrics'
MODE_ACCEPTED_VALUES = ['metrics', 'alerts']

METRICS_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../metrics/'))
ALERTS_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../alerts/'))

METRICS_EXTENSION = 'mtc'
ALERTS_EXTENSION = 'mtc'

MODE2PAGE_DATA_MAP = {
    mode: {
        'name': f'BI {mode.title()}',
        'title': eval(f'BI_{mode.upper()}_PAGE_TITLE'),
        'block_id': eval(f'BI_{mode.upper()}_PAGE_BLOCK_ID'),
        'operation': mode[:-1],
        'local_path': eval(f'{mode.upper()}_PATH'),
        'files_extension': eval(f'{mode.upper()}_EXTENSION'),
        's3_path': eval(f'S3_{mode.upper()}_PATH'),
        'table_name': eval(f'SF_{mode.upper()}_TABLE_NAME'),
    } for mode in MODE_ACCEPTED_VALUES
}


