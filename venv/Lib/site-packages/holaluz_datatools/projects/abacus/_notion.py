import logging
import notion.client
import notion.block

from ._params import *

logger = logging.getLogger(__name__)

class NotionWrapper:
    """
    Wrapper around the notion-py Python package.

    It uses the `notion.NotionClient` object to add the new metrics
    to either the BI Metrics or the BI Alerts page.
    """
    def __init__(self, token, mode = DEFAULT_MODE, files_extension = None, **kwargs):
        """
        Parameters
        ----------
        token: str
            the Notion v2 API token
        mode: str, optional
            whether to use the wrapper to interact with
                - the BI Metrics page (if `mode = 'metrics'`)
                - the BI Alerts page (if `mode = 'alerts'`)
        files_extension: str, optional
            default files extension. if not given, it uses the default,
            according to `MODE2PAGE_DATA_MAP` and `mode`
        **kwargs
            further keyword arguments forwarded to the 
            `notion.NotionClient`
        """
        if mode not in MODE_ACCEPTED_VALUES:
            raise ValueError(f'mode must be one of {MODE_ACCEPTED_VALUES}')

        self.client = notion.client.NotionClient(token_v2 = token, **kwargs)
        self.mode = mode
        self.page_title = MODE2PAGE_DATA_MAP[mode]['title']
        self.page_block_id = MODE2PAGE_DATA_MAP[mode]['block_id']
        self.page_name = MODE2PAGE_DATA_MAP[mode]['name']
        self.operation_name = MODE2PAGE_DATA_MAP[mode]['operation']
        self.files_extension = files_extension or MODE2PAGE_DATA_MAP[mode]['files_extension'] 
    
    def metric_exists(self, metric_name):
        """
        Checks if the metric `metric_name` exists (by searching if
        there is any block with that name)
        
        Parameters
        ----------
        metric_name: str
            the metric name
        
        Returns
        -------
        exists: bool
            True or False, depending on whether the metric
            exists or not
        """
        return any(
            metric_name == block.title for block in self.client.search_blocks(metric_name) 
            if hasattr(block, 'title')
        )
    
    def _get_metrics_block(self):
        """Searches for the metrics block"""
        # dunno why `get_block` does not find the Metrics block
        # unless we use the `search` method before
        _ = self.client.search_blocks(self.page_title)
        return self.client.get_block(self.page_block_id)
    
    def _get_metric_block_kwargs(self, metric_data):
        """
        Creates a new metric block with (part of) the metric data and
        the defaults
        """
        metric_kwargs = {'title': metric_data['name'], 'team': metric_data['team']}
        return {**METRIC_DEFAULT_KWARGS, **metric_kwargs}
    
    def _get_metric_file_name(self, metric_name):
        """
        Returns the name of the file that contains the metric info, 
        from the metric name `metric_name`
        """
        return metric_name.replace(' ', '_').lower() + f'.{self.files_extension}'
    
    def add_metric(self, metric_data, force_creation = False):
        """
        Adds a new metric in the BI Metrics Notion page
        
        Parameters
        ----------
        metric_data: dict
            the metric data as a dictionary, i.e., each value of what
            the `MetricParser.read_metric_file` returns
        force_creation: bool, optional, default = False
            whether to force the creation (or replacement) of a metric
            page. This argument may be useful if another page with the
            same name as the metric already exists, as the check to 
            avoid duplicates uses names.
        """
        if not self.metric_exists(metric_data['name']) or force_creation:
            job = 'creating new' if not force_creation else 'overwritting'
            logger.info(
                f'{job} {self.operation_name} {metric_data["name"]!r} '
                f'in the {self.page_name} Notion page'
            )
            metrics_block = self._get_metrics_block()
            metric_block = metrics_block.collection.add_row(
                **self._get_metric_block_kwargs(metric_data)
            )

            metric_block.children.add_new(
                notion.block.basic.HeaderBlock, 
                title = 'Description'
            )
            metric_block.children.add_new(
                notion.block.basic.TextBlock, 
                title = metric_data['description']
            )

            metric_block.children.add_new(
                notion.block.basic.HeaderBlock,
                title = f'Query ({metric_data["flavour"]})'
            )
            metric_block.children.add_new(
                notion.block.basic.CodeBlock, 
                title = metric_data['query'], 
                language = 'SQL'
            )
            
            metric_block.children.add_new(
                notion.block.basic.HeaderBlock,
                title = f'Origin'
            )
            metric_block.children.add_new(
                notion.block.basic.TextBlock, 
                title = METRIC_ORIGIN_MSG.format(
                    self._get_metric_file_name(metric_data['name'])
                )
            )
        else:
            logger.info(
                f'{self.operation_name} {metric_data["name"]!r} already '
                f'exists in the {self.page_name} Notion page'
            )