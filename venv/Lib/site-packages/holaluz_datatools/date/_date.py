# -*- coding: utf-8 -*-
"""
Created on Mon Sep  6 16:24:09 2021

@author: roger.lloret
"""

from calendar import monthrange
from dateutil.relativedelta import relativedelta
from pandas import to_datetime
import pandas as pd

def next_date_start(date_start):
    """
    Computes the date of the first and last day of the following month.
    Parameters
    ----------
    date_start : date
        The current start date to use to compute the next month date.

    Returns
    -------
    date_start : date
        Next start date.
    date_end : date
        Next end date.

    """
    
    next_start_date = date_start +  relativedelta(months=1)
    day_end = monthrange(to_datetime(next_start_date).year,
                         to_datetime(next_start_date).month)[1]
    date_end = str(to_datetime(next_start_date.strftime('%Y-%m-')
                                  + str(day_end)).strftime('%Y-%m-%d'))
    
    return next_start_date, date_end

def get_dateranges(start_date, end_date, start_freq = 'MS', end_freq = 'M', format = '%Y-%m-%d'):
    """
    Computes the date of the first and last day of the months 
    between `start_date` and `end_date`.
    
    Parameters
    ----------
    start_date : str or timestamp
        The start date of the date ranges.
    end_date : str or timestamp
        The end date of the date ranges.
    start_freq: str or pandas.tseries.offsets.DateOffset, optional, default: 'MS'
        Frequency of the DatetimeIndex containing the month start days
    end_freq: str or pandas.tseries.offsets.DateOffset, optional, default: 'M'
        Frequency of the DatetimeIndex containing the month end days

    Returns
    -------
    date_ranges: gen[tuple[str]]
        a generator of tuples (start_date, end_date) as string, 
        and formatted according `format`
    """
    end_date = pd.to_datetime(end_date) + pd.offsets.MonthEnd()
    daterange_start = pd.date_range(start_date, end_date, freq = start_freq).strftime(format)
    daterange_end = pd.date_range(start_date, end_date, freq = end_freq).strftime(format)
    return zip(daterange_start, daterange_end)
