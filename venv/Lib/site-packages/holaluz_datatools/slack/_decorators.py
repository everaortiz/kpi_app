import sys
import logging
import traceback
import functools

from ._slack_custom import send_message_by_slack, SLACK_BI_INTEGRATOR_CHANNEL

logger = logging.getLogger(__name__)

def run_or_send_log_error(*, credentials, script_name = sys.argv[0], channel = SLACK_BI_INTEGRATOR_CHANNEL, logger_level = logging.INFO):
    """
    Run the function `function` from the script `script_name`. If the script fails, 
    it sends an error message by calling `send_message_by_slack`, see its docs for
    further info

    It must be used as follows
    ```
        @run_or_send_log_error(credentials = slackbot_credentials)
        def func(*args, **kwargs):
            ...
    ```

    Note that this function has the same effect as `slack_custom.run_or_send_log_error`
    but has differents arguments

    Parameters
    ----------
    credentials: dict
        credentials for the slack bot that sends the message
    channel: str, optional
        name of the slack channel where the error message would be sent
    script_name: str, optional
        name of the executed script
    logger_level: int
        level of the logger. one of `logging.DEBUG`, `logging.INFO`, `logging.WARNING`, 
        `logging.ERROR`, `logging.CRITICAL`, or any custom level one may use
    """
    def run_or_send_log_error_decorator(func):
        @functools.wraps(func)
        def run_or_send_log_error_wrapper(*args, **kwargs):            
            logger.info(f"Starting the execution of '{script_name}'")
            try:
                result = func(*args, **kwargs)
            except Exception as e:
                traceback_message = '\n'.join(traceback.format_tb(e.__traceback__))
                error_message = (
                    f"Unable to execute the script `{script_name}` due to the following error:\n"
                    f"```{traceback_message}\n{type(e).__name__}: {e}```"
                )
                send_message_by_slack(error_message, credentials, script_name, channel = channel)
            else:
                logger.info(f"'{script_name}' executed successfully\n")
                return result
        return run_or_send_log_error_wrapper
    return run_or_send_log_error_decorator