import os
import platform
import yaml
import logging
import botocore
from google.oauth2.service_account import Credentials

from ..aws import SecretsManagerResource
from ..utils import search_fp_obj


## regular credentials
# as environ variables, which are forwarded by the
# AWS Secrets Manager when creating the infra
ANTARTICA_LOGS_CREDS_KEY = 'antartica_logs'
BRAVE_NEW_WORLD_CREDS_KEY = 'bnw_read'
CLIPS_READ_CREDS_KEY = 'clips_read'
CORE_READ_CREDS_KEY = 'core_read'
CORE_READ_BETTER_CREDS_KEY = 'core_read_better'
CORE_WRITE_CREDS_KEY = 'core_write'
EKON_READ_CREDS_KEY = 'ekon_read'
HOPE_READ_CREDS_KEY = 'hope_read'
LARAVEL_CREDS_KEY = 'laravel'
MYSQL_DW_READ_CREDS_KEY = 'mysql_dw_read'
MYSQL_DW_WRITE_CREDS_KEY = 'mysql_dw_write'
MYSQL_SAC_CREDS_KEY = 'mysql_sac_read'
OAK_READ_CREDS_KEY = 'oak_read'
S3_CREDS_KEY = 's3'
S3_MAIN_CREDS_KEY = 's3_main'
SLACK_BI_INTEGRATOR_CREDS_KEY = 'slack_bi_integrator'
SLACK_SOLAR_CREDS_KEY = 'slack_solar'
SNOWFLAKE_DW_EM_CREDS_KEY = 'snowflake_dw_em'
SNOWFLAKE_DW_WRITE_CREDS_KEY = 'snowflake_dw_write'
SNOWFLAKE_DW_WRITE_BETTER_CREDS_KEY = 'snowflake_dw_write_better'
SOLARSALES_CREDS_KEY = 'solarsales'
TALKDESK_CREDS_KEY = 'talkdesk'
WALLE_READ_CREDS_KEY = 'walle_read'
ZOHO_ANALYTICS_CREDS_KEY = 'zoho_read'
ZOHO_DESK_CREDS_KEY = 'zoho_desk'

# if gathering them from AWS Secrets Manager directly
DEFAULT_SECRET_NAME = 'data-analytics-master-secrets'

# from a local file
LOCAL_PATH = os.environ['USERPROFILE'] if 'USERPROFILE' in os.environ else os.environ['HOME']
WINDOWS_SERVER_PATH = 'D:/bi-integrator'
CREDENTIALS_PATH_SUFFIX =  'creds'
CREDENTIALS_PATHS = [
    os.path.join(LOCAL_PATH, CREDENTIALS_PATH_SUFFIX), 
    os.path.join(WINDOWS_SERVER_PATH, CREDENTIALS_PATH_SUFFIX)
]
CREDENTIALS_FILE = 'creds.yaml'
CREDENTIALS_FILE_NAME = 'local credentials file'

## Google APIs credentials
# from secrets manager
DEFAULT_GOOGLE_DRIVE_SECRET_NAME = 'data-analytics-google-apis-default-secret'

# from a local file
GOOGLE_DRIVE_SERVICE_ACCOUNT_CREDENTIALS_FILE = 'bi-drive-api-creds.json'
GOOGLE_DRIVE_SERVICE_ACCOUNT_CREDENTIALS_FILE_NAME = 'google APIs local credentials file'

# the default scopes
GOOGLE_DRIVE_SERVICE_ACCOUNT_SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]


logger = logging.getLogger(__name__)

def _load_credentials_from_environ():
    # when using AWS infra as ECS, the secrets can be retrieved as 
    # as environ variables that are forwarded by the Secrets Manager.
    # we just need to reconstruct the credentials dict using them
    creds = {}
    
    if 'ANTARTICA_LOGS_CREDS_KEY' in os.environ:
        creds[ANTARTICA_LOGS_CREDS_KEY] = {
            'database': os.environ['ANTARTICA_LOGS_DATABASE'],
            'host': os.environ['ANTARTICA_LOGS_HOST'],
            'password': os.environ['ANTARTICA_LOGS_PASSWORD'],
            'port': os.environ['ANTARTICA_LOGS_PORT'],
            'username': os.environ['ANTARTICA_LOGS_USERNAME']
        }
    if 'BRAVE_NEW_WORLD_CREDS_KEY' in os.environ:
        creds[BRAVE_NEW_WORLD_CREDS_KEY] = {
            'database': os.environ['BRAVE_NEW_WORLD_DATABASE'],
            'host': os.environ['BRAVE_NEW_WORLD_HOST'],
            'password': os.environ['BRAVE_NEW_WORLD_PASSWORD'],
            'port': os.environ['BRAVE_NEW_WORLD_PORT'],
            'username': os.environ['BRAVE_NEW_WORLD_USERNAME']
        }
    if 'CLIPS_READ_CREDS_KEY' in os.environ:
        creds[CLIPS_READ_CREDS_KEY] = {
            'database': os.environ['CLIPS_READ_DATABASE'],
            'host': os.environ['CLIPS_READ_HOST'],
            'password': os.environ['CLIPS_READ_PASSWORD'],
            'port': os.environ['CLIPS_READ_PORT'],
            'username': os.environ['CLIPS_READ_USERNAME']
        }
    if 'CORE_READ_CREDS_KEY' in os.environ:
        creds[CORE_READ_CREDS_KEY] = {
            'database': os.environ['CORE_READ_DATABASE'],
            'host': os.environ['CORE_READ_HOST'],
            'password': os.environ['CORE_READ_PASSWORD'],
            'port': os.environ['CORE_READ_PORT'],
            'username': os.environ['CORE_READ_USERNAME']
        }
    if 'CORE_READ_BETTER_CREDS_KEY' in os.environ:
        creds[CORE_READ_BETTER_CREDS_KEY] = {
            'database': os.environ['CORE_READ_BETTER_DATABASE'],
            'host': os.environ['CORE_READ_BETTER_HOST'],
            'password': os.environ['CORE_READ_BETTER_PASSWORD'],
            'port': os.environ['CORE_READ_BETTER_PORT'],
            'username': os.environ['CORE_READ_BETTER_USERNAME']
        }
    if 'CORE_WRITE_CREDS_KEY' in os.environ:
        creds[CORE_WRITE_CREDS_KEY] = {
            'database': os.environ['CORE_WRITE_DATABASE'],
            'host': os.environ['CORE_WRITE_HOST'],
            'password': os.environ['CORE_WRITE_PASSWORD'],
            'port': os.environ['CORE_WRITE_PORT'],
            'username': os.environ['CORE_WRITE_USERNAME']
        }    
    if 'EKON_READ_CREDS_KEY' in os.environ:   
        creds[EKON_READ_CREDS_KEY] = {
            'database': os.environ['EKON_READ_DATABASE'],
            'host': os.environ['EKON_READ_HOST'],
            'password': os.environ['EKON_READ_PASSWORD'],
            'username': os.environ['EKON_READ_USERNAME']
        }
    if 'HOPE_READ_CREDS_KEY' in os.environ:
        creds[HOPE_READ_CREDS_KEY] = {
            'database': os.environ['HOPE_READ_CREDS_KEY'],
            'host': os.environ['HOPE_READ_CREDS_KEY'],
            'password': os.environ['HOPE_READ_CREDS_KEY'],
            'username': os.environ['HOPE_READ_CREDS_KEY']
        }
    if 'LARAVEL_CREDS_KEY' in os.environ:
        creds[LARAVEL_CREDS_KEY] = {
            'database': os.environ['LARAVEL_DATABASE'],
            'host': os.environ['LARAVEL_HOST'],
            'password': os.environ['LARAVEL_PASSWORD'],
            'port': os.environ['LARAVEL_PORT'],
            'username': os.environ['LARAVEL_USERNAME']
        }
    if 'MYSQL_DW_READ_CREDS_KEY' in os.environ:
        creds[MYSQL_DW_READ_CREDS_KEY] = {
            'database': os.environ['MYSQL_DW_READ_DATABASE'],
            'host': os.environ['MYSQL_DW_READ_HOST'],
            'password': os.environ['MYSQL_DW_READ_PASSWORD'],
            'port': os.environ['MYSQL_DW_READ_PORT'],
            'username': os.environ['MYSQL_DW_READ_USERNAME']
        }
    if 'MYSQL_DW_WRITE_CREDS_KEY' in os.environ:
        creds[MYSQL_DW_WRITE_CREDS_KEY] = {
            'database': os.environ['MYSQL_DW_WRITE_DATABASE'],
            'host': os.environ['MYSQL_DW_WRITE_HOST'],
            'password': os.environ['MYSQL_DW_WRITE_PASSWORD'],
            'port': os.environ['MYSQL_DW_WRITE_PORT'],
            'username': os.environ['MYSQL_DW_WRITE_USERNAME']
        } 
    if 'MYSQL_SAC_CREDS_KEY' in os.environ:
        creds[MYSQL_SAC_CREDS_KEY] = {
            'database': os.environ['MYSQL_SAC_DATABASE'],
            'host': os.environ['MYSQL_SAC_HOST'],
            'password': os.environ['MYSQL_SAC_PASSWORD'],
            'port': os.environ['MYSQL_SAC_PORT'],
            'username': os.environ['MYSQL_SAC_USERNAME']
        }
    if 'OAK_READ_CREDS_KEY' in os.environ:
        creds[OAK_READ_CREDS_KEY] = {
            'database': os.environ['OAK_READ_DATABASE'],
            'host': os.environ['OAK_READ_HOST'],
            'password': os.environ['OAK_READ_PASSWORD'],
            'username': os.environ['OAK_READ_USERNAME']
        }
    if 'S3_CREDS_KEY' in os.environ:
        creds[S3_CREDS_KEY] = {
            'access_key': os.environ['S3_ACCESS_KEY'],
            'secret_key': os.environ['S3_SECRET_KEY'],
            'assumed_role': os.environ['S3_ASSUMED_ROLE']
        }
    if 'S3_MAIN_CREDS_KEY' in os.environ:
        creds[S3_MAIN_CREDS_KEY] = {
            'access_key': os.environ['S3_MAIN_ACCESS_KEY'],
            'secret_key': os.environ['S3_MAIN_SECRET_KEY']
        }
        
    if 'SLACK_BI_INTEGRATOR_CREDS_KEY' in os.environ:
        creds[SLACK_BI_INTEGRATOR_CREDS_KEY] = {
            'token': os.environ['SLACK_BI_INTEGRATOR_TOKEN'],
        }
    if 'SLACK_SOLAR_CREDS_KEY' in os.environ:
        creds[SLACK_SOLAR_CREDS_KEY] = {
            'token': os.environ['SLACK_SOLAR_TOKEN'],
        }
    if 'SNOWFLAKE_DW_WRITE_CREDS_KEY' in os.environ:
        creds[SNOWFLAKE_DW_WRITE_CREDS_KEY] = {
            'account': os.environ['SNOWFLAKE_DW_WRITE_ACCOUNT'],
            'database': os.environ['SNOWFLAKE_DW_WRITE_DATABASE'],
            'host': os.environ['SNOWFLAKE_DW_WRITE_HOST'],
            'password': os.environ['SNOWFLAKE_DW_WRITE_PASSWORD'],
            'role': os.environ['SNOWFLAKE_DW_WRITE_ROLE'],
            'username': os.environ['SNOWFLAKE_DW_WRITE_USERNAME'],
            'warehouse': os.environ['SNOWFLAKE_DW_WRITE_WAREHOUSE']
        }
    if 'SNOWFLAKE_DW_WRITE_BETTER_CREDS_KEY' in os.environ:
        creds[SNOWFLAKE_DW_WRITE_BETTER_CREDS_KEY] = {
            'account': os.environ['SNOWFLAKE_DW_WRITE_BETTER_ACCOUNT'],
            'database': os.environ['SNOWFLAKE_DW_WRITE_BETTER_DATABASE'],
            'host': os.environ['SNOWFLAKE_DW_WRITE_BETTER_HOST'],
            'password': os.environ['SNOWFLAKE_DW_WRITE_BETTER_PASSWORD'],
            'role': os.environ['SNOWFLAKE_DW_WRITE_BETTER_ROLE'],
            'username': os.environ['SNOWFLAKE_DW_WRITE_BETTER_USERNAME'],
            'warehouse': os.environ['SNOWFLAKE_DW_WRITE_BETTER_WAREHOUSE']
        }
    if 'SNOWFLAKE_DW_EM_CREDS_KEY' in os.environ:
        creds[SNOWFLAKE_DW_EM_CREDS_KEY] = {
            'account': os.environ['SNOWFLAKE_DW_EM_ACCOUNT'],
            'database': os.environ['SNOWFLAKE_DW_EM_DATABASE'],
            'host': os.environ['SNOWFLAKE_DW_EM_HOST'],
            'password': os.environ['SNOWFLAKE_DW_EM_PASSWORD'],
            'role': os.environ['SNOWFLAKE_DW_EM_ROLE'],
            'username': os.environ['SNOWFLAKE_DW_EM_USERNAME'],
            'warehouse': os.environ['SNOWFLAKE_DW_EM_WAREHOUSE']
        }        
    if 'SOLARSALES_CREDS_KEY' in os.environ:
        creds[SOLARSALES_CREDS_KEY] = {
            'database': os.environ['SOLARSALES_DATABASE'],
            'host': os.environ['SOLARSALES_HOST'],
            'password': os.environ['SOLARSALES_PASSWORD'],
            'username': os.environ['SOLARSALES_USERNAME']
        }
    if 'TALKDESK_CREDS_KEY' in os.environ:
        creds[TALKDESK_CREDS_KEY] = {
            'client_id': os.environ['TALKDESK_CLIENT_ID'],
            'client_secret': os.environ['TALKDESK_CLIENT_SECRET']
        }    
    if 'WALLE_READ_CREDS_KEY' in os.environ:
        creds[WALLE_READ_CREDS_KEY] = {
            'database': os.environ['WALLE_READ_DATABASE'],
            'host': os.environ['WALLE_READ_HOST'],
            'password': os.environ['WALLE_READ_PASSWORD'],
            'username': os.environ['WALLE_READ_USERNAME']
        }
    if 'ZOHO_ANALYTICS_CREDS_KEY' in os.environ:
        creds[ZOHO_ANALYTICS_CREDS_KEY] = {
            'client_id': os.environ['ZOHO_ANALYTICS_CLIENT_ID'],
            'client_secret': os.environ['ZOHO_ANALYTICS_CLIENT_SECRET'],
            'owner_email_id': os.environ['ZOHO_ANALYTICS_OWNER_EMAIL_ID'],
            'refresh_token': os.environ['ZOHO_ANALYTICS_REFRESH_TOKEN']
        }
    if 'ZOHO_DESK_CREDS_KEY' in os.environ:
        creds[ZOHO_DESK_CREDS_KEY] = {
            'client_id': os.environ['ZOHO_DESK_CLIENT_ID'],
            'client_secret': os.environ['ZOHO_DESK_CLIENT_SECRET'],
            'refresh_token': os.environ['ZOHO_DESK_REFRESH_TOKEN']
        }
       
    return creds

def _load_credentials_from_secrets_manager(secret_name, aws_credentials_fp):
    if aws_credentials_fp:
        creds_obj = botocore.credentials.SharedCredentialProvider(aws_credentials_fp).load()
        if not creds_obj:
            cre = botocore.exceptions.CredentialRetrievalError(
                provider = 'shared file', 
                error_msg = f'unable to parse credentials from {aws_credentials_fp!r}'
            )
            logger.error(cre)
            return {}
            
        access_key, secret_key = creds_obj.access_key, creds_obj.secret_key
    else:
        access_key = secret_key = None
        
    try:
        return SecretsManagerResource(
            access_key = access_key, 
            secret_key = secret_key
        ).get_secret(secret_name)
    except Exception as e:
        logger.error(
            f'unable to load credentials from the secrets manager due to '
            f'the following error: {e.__class__.__name__}: {e}'
        )
        return {}

def _load_credentials_from_file(credentials_fp):       
    try:
        if credentials_fp is None:
            credentials_fp = search_fp_obj(
                target_fp_obj = CREDENTIALS_FILE,
                search_paths = CREDENTIALS_PATHS,
                target_fp_obj_name = CREDENTIALS_FILE_NAME
            )
        
        with open(credentials_fp) as fin:
            # it can load both JSON and YAML files
            credentials = yaml.safe_load(fin)
    except Exception as e:
        logger.error(
            f'unable to load credentials from the local file {credentials_fp!r} '
            f'due to the following error: {e.__class__.__name__}: {e}'
        )
        return {}, credentials_fp
    else: 
        return credentials, credentials_fp

def _key_from_credentials(key_name, credentials):
    if key_name is None:
        return credentials
    else:
        try:
            return credentials[key_name]
        except KeyError:
            cred_keys = credentials.keys()
            if key_name not in cred_keys:
                ke =  KeyError(
                    f'`key_name` must be one of {list(cred_keys)} for the given '
                    f'credentials, but {key_name!r} was passed'
                )
                logger.error(f'{ke.__class__.__name__}: {ke}')
                raise ke

    
def load_credentials(
    key_name = None, 
    credentials_fp = None, 
    secret_name = None,
    aws_credentials_fp = None
):
    """
    Loads the credentials to use the module classes.
    
    If given a path to a local (`yaml` or `json`) file, it loads the credentials
    from the given file. Otherwise, it tries to load the credentials as environ
    variables. Finally, it searches in AWS Secrets Manager, according to
    `secret_name`

    Parameters
    ----------
    key_name: str or None, optional
        if `None` (default) loads all credentials. as `str`, get the credentials
        associated to that key_name
    credentials_fp: str, optional
        path to the `yaml` or `json` credentials file. if None, it searches the 
        credentials file in `DEFAULT_CREDENTIALS_FPS`
    secret_name: str, optional
        name of the secrets stored in the Secrets Manager from which it gets the
        credentials
    aws_credentials_fp: str, optional
        path to the AWS CLI credentials used to access the Secrets Manager. only
        used if retrieving the credentials from the Secrets Manager
    
    Returns
    -------
    credentials: dict
        the loaded credentials
    
    Raises
    ------
    botocore.exceptions.CredentialRetrievalError
        if `aws_credentials_fp` is not None but botocore can't load the credentials from it
    ValueError
        if it can't load the credentials either way
    KeyError
        if `key_name` is not None and `key_name` is not one of the credentials keys
    """
    logger.debug(f'Getting credentials in a {platform.platform()!r} platform')
    
    if credentials_fp and secret_name:
        logger.warning(
            'you set both `secret_name` and `credentials_fp`. '
            'the former has priority over the latter'
        )
    
    # environment variables (default)
    if secret_name is None and credentials_fp is None:
        credentials = _load_credentials_from_environ()
        if credentials:
            logger.debug('loaded credentials from environment variables')
            return _key_from_credentials(key_name, credentials)
        
        logger.debug('unable to load credentials from environment variables')
    
    # from secrets manager
    if secret_name is not None or credentials_fp is None:
        secret_name = secret_name or DEFAULT_SECRET_NAME
        credentials = _load_credentials_from_secrets_manager(secret_name, aws_credentials_fp)
        if credentials:
            logger.debug(f'loaded credentials from secrets manager, using {secret_name!r}')
            return _key_from_credentials(key_name, credentials)
    
    # from local file
    credentials, credentials_fp = _load_credentials_from_file(credentials_fp)
    if credentials:
        logger.debug(f'loaded credentials from local file {credentials_fp!r}')
        return _key_from_credentials(key_name, credentials)
        
    ve = ValueError('unable to load credentials with the given configuration')
    logger.error(ve)
    raise ve

def load_google_drive_service_account_credentials(
        credentials_fp = None,
        secret_name = None,
        scopes = GOOGLE_DRIVE_SERVICE_ACCOUNT_SCOPES,
        aws_credentials_fp = None
    ):
    """
    Loads the credentials from the given service account `json` file,
    or the corresponding secret `secret_name` in the AWS Secrets Manager.

    Parameters
    ----------
    credentials_fp: str, optional
        path to the `json` credentials file. if None, it searches the 
        credentials file in `GOOGLE_DRIVE_SERVICE_ACCOUNT_DEFAULT_CREDENTIALS_FPS`
    secret_name: str, optional
        name of the secrets stored in the Secrets Manager from which it gets the
        credentials
    scopes: str or list[str], optional
        scopes to use when acquiring an access token
    aws_credentials_fp: str, optional
        path to the AWS CLI credentials used to access the Secrets Manager. only
        used if retrieving the credentials from the Secrets Manager
    
    Returns
    -------
    credentials: google.oauth2.service_account.Credentials
        the loaded credentials
    """
    if credentials_fp and secret_name:
        logger.warning(
            'you set both `secret_name` and `credentials_fp`. '
            'the former has priority over the latter'
        )
    
    # from secrets manager
    if secret_name is not None or credentials_fp is None:
        secret_name = secret_name or DEFAULT_GOOGLE_DRIVE_SECRET_NAME
        service_account_credentials = _load_credentials_from_secrets_manager(
            secret_name, 
            aws_credentials_fp
        )
        if service_account_credentials:
            logger.debug(f'loaded credentials from secrets manager, using {secret_name!r}')
            return Credentials.from_service_account_info(
                info = service_account_credentials, 
                scopes = scopes
            )
    
    # from local file
    if credentials_fp is None:
        credentials_fp = search_fp_obj(
            target_fp_obj = GOOGLE_DRIVE_SERVICE_ACCOUNT_CREDENTIALS_FILE,
            search_paths = CREDENTIALS_PATHS,
            target_fp_obj_name = GOOGLE_DRIVE_SERVICE_ACCOUNT_CREDENTIALS_FILE_NAME
        )
                
    logger.debug(f'loaded credentials from local file {credentials_fp!r}')
    return Credentials.from_service_account_file(credentials_fp, scopes = scopes)
