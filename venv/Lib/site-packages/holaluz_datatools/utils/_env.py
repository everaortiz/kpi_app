import os
import dotenv
import logging

from ._searchers import search_fp_obj


HOME_PATH = os.environ['USERPROFILE'] if 'USERPROFILE' in os.environ else os.environ['HOME']
GITHUB_PATH = os.path.join(HOME_PATH, 'documents', 'github')
DEFAULT_REPOS = ['bi-integrator']
ENV_FILENAME = '.env'
DEFAULT_ENV_PATH_LIST = [
    os.path.realpath(os.path.join(GITHUB_PATH, repo)) for repo in DEFAULT_REPOS
]

DOTENV_FILENAME = '.env'

DOTENV_OBJ_NAME = 'dotenv file'


logger = logging.getLogger(__name__)

class EnvironmentLoadError(Exception):
    """
    custom exception raised when a dotenv file (`.env`) is loaded,
    but the environ variables do not change, potentially because 
    the file is empty
    """
    pass

def load_environ(
    dotenv_fp = None, 
    override = False, 
    interpolate = True, 
    encoding = 'utf-8', 
):
    """
    parses a .env file, loads all the variables found as environment variables 
    and returns an `os.environ` object.

    Parameters
    ----------
    dotenv_path: str, optional
        absolute or relative path to the .env file
    override: bool, optional
        whether to override the system environment variables with the variables
        from the .env file.
    encoding: str, optional
        encoding to be used to read the file

    Return
    ------
    environ: os.environ

    Raises
    ------
    FileNotFoundError
        if `dotenv_fp` is None and `search_fp_obj` can't find any dotenv file
    EnvironmentLoadError
        if the .env file is found but no variables are added no the environment
        variables 
    """
    if dotenv_fp is None:
        dotenv_fp  = search_fp_obj(
            target_fp_obj = DOTENV_FILENAME, 
            search_paths = DEFAULT_ENV_PATH_LIST,
            target_fp_obj_name = DOTENV_OBJ_NAME
        )

    env_load_flag = dotenv.load_dotenv(
        dotenv_path = dotenv_fp,  
        override = override,
        interpolate = interpolate, 
        encoding = encoding,
        verbose = False
    )
    
    if not env_load_flag:
        ele = EnvironmentLoadError(
            f'found dotenv file {dotenv_fp!r} but no variables have been loaded '
            f'(environ has not changed). consider checking the dotenv file'
        )
        logger.error(f'{ele.__class__.__name__}: {ele}')
        
    return os.environ
    