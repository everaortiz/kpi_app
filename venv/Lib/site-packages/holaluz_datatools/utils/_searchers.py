import os
import sys
import logging

DEFAULT_NAME = 'target filepath object'

logger = logging.getLogger(__name__)

def _search_fp_obj_upwards(target_fp_obj, path, target_fp_obj_name, n_levels):
    """
    helper (private) function to search for `target_fp_obj` in `path`,
    and up to `n_levels` levels upwards in the folder hierarchy.
    """
    for i in range(n_levels):
        logger.debug(
            f'Searching for the {target_fp_obj_name} {target_fp_obj!r} '
            f'in {path!r} ({i} layer(s) deep)'
        )
        
        potencial_target = os.path.realpath(os.path.join(path, target_fp_obj))
        if os.path.exists(potencial_target):
            logger.debug(
                f'Found the {target_fp_obj_name}  {target_fp_obj!r} '
                f'in {path!r}'
            )
            return potencial_target

        # move up one directory
        path = os.path.dirname(path)

def search_fp_obj(target_fp_obj, search_paths = [], target_fp_obj_name = DEFAULT_NAME, n_levels = 5):
    """
    helper function to search for `target_fp_obj` in `search_paths` and up 
    to `n_levels` levels upwards in the folder hierarchy for each of them,
    if given. if not found, it checks in the script location, and also up
    to `n_levels` levels upwards in the folder hierarchy.

    it raises `FileNotFoundError` if the target object is not found.
    """
    log_error_msg = f'unable to find the {target_fp_obj_name} {target_fp_obj!r} '
    
    # search in `search_paths`, if given
    if search_paths:        
        for path in search_paths:
            potencial_path = _search_fp_obj_upwards(
                target_fp_obj, 
                path,
                target_fp_obj_name,
                n_levels,
            )
            if potencial_path is not None:
                return potencial_path
        else:
            log_error_msg += (
                f'in any of {search_paths}, moving up to {n_levels} '
                f'levels upwards, nor '
            )
    
    # check starting at the script full filepath 
    script_path = os.path.dirname(sys.argv[0])
    potencial_path = _search_fp_obj_upwards(
        target_fp_obj, 
        script_path, 
        target_fp_obj_name, 
        n_levels
    )
    if potencial_path is not None:
        return potencial_path
    else:
        log_error_msg += (
            f'moving up to {n_levels} levels upwards in the folder hierarchy '
            f'from the script path {script_path!r}'
        )
        fnfe = FileNotFoundError(log_error_msg)
        logger.error(fnfe)
        raise fnfe
