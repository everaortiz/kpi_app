import os
import logging

from ._searchers import search_fp_obj

logger = logging.getLogger(__name__)

LOCAL_PATH = os.environ['USERPROFILE'] if 'USERPROFILE' in os.environ else os.environ['HOME']
REPO_NAME = 'bi-integrator'
ROOT_PATHS = [
    os.path.join(LOCAL_PATH, 'Documents', 'github'),
    os.path.join(LOCAL_PATH, 'Documentos', 'github'),
    'D:/'
]
REPO_PATHS = [os.path.realpath(os.path.join(path, REPO_NAME)) for path in ROOT_PATHS]

QUERY_OBJ_NAME = 'query {}file'

def load_query(query_name_or_filename, query_path = '', name2file_map = None, encoding = 'utf-8'):
    """
    Reads a query from a (local) file
    
    Parameters
    ----------
    query_name_or_filename: str
        either the name of the file containing the query to be loaded or 
        a query name to be mapped to a query file using `name2file_map`
    query_path: str, optional
        path to the foldernwhere the query files are located. if not given,
        it uses one of `REPO_PATHS`
    name2file_map: dict, optional
        mapping between the query name and the query file to be loaded
    encoding: str, optional, default: 'utf-8'
        encoding used when reading the query file

    Returns
    -------
    query: str
        the query loaded from the local file

    Raises
    ------
    FileNotFoundError
        if `query_path` is not set and the query file is not present in
        any of `REPO_PATHS`
    ValueError
        if `name2file_map` is not None and `query_name_or_filename` is 
        not one of its keys
    """
    if name2file_map:
        if query_name_or_filename not in name2file_map:
            raise ValueError(
                f'query name must be one of {list(name2file_map)}, '
                f'but {query_name_or_filename!r} was given'
            )
        query_filename = name2file_map[query_name_or_filename]
    else:
        query_filename = query_name_or_filename

    # the query file might not be in the same folder as the script
    # that loads it
    if not os.path.isfile(query_filename):
        if query_path:
            query_filepath = os.path.join(query_path, query_filename)
        else:
            query_obj_name_infix = f'{query_name_or_filename!r} ' if name2file_map else ''
            query_filepath = search_fp_obj(
                target_fp_obj = query_filename, 
                search_paths = REPO_PATHS,
                target_fp_obj_name = QUERY_OBJ_NAME.format(query_obj_name_infix)
            )
    else:
        query_filepath = query_filename

    with open(query_filepath, encoding = encoding) as fin:
        return fin.read().strip()