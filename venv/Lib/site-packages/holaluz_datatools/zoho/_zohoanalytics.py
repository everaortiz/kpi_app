import csv
import re
import logging
import json
import pandas as pd

from ._zoho.report_client import ReportClient, ServerError

DEFAULT_DATABASE_NAME = 'Zoho_Workspace CRM y DESK'
DEFAULT_RETRIES = 3

logger = logging.getLogger(__name__)

class ReadableServerError(Exception):
    pass

class ZohoAnalyticsClient:
    """
    Custom Zoho Analytics Client with limited functionalities. 
    
    In particular, using this client one can only query tables and check the DB and tables metadata.
    For other functionalities, such as creating or updating tables, use the official Python library
    (see https://www.zoho.com/analytics/api/?python#python-library). Its methods can be accessed via
    this other client using `self.client`.
    """
    
    def __init__(self, refresh_token, client_id, client_secret, owner_email_id, 
                 default_database_name = DEFAULT_DATABASE_NAME, default_retries = DEFAULT_RETRIES, errors = 'raise',
                  **kwargs):
        """
        Parameters
        ----------
        refresh_token: str
            user refresh token (generated when following the steps from https://www.zoho.com/analytics/api/#oauth)
        client_id: str
            client id (generated when following the steps from https://www.zoho.com/analytics/api/#oauth)
        client_secret: str
            client seccret (generated when following the steps from https://www.zoho.com/analytics/api/#oauth)
        owner_email_id: str, optional
            database owner email
        default_database_name: str, optional
            name of the default database
        errors: str, optional
            how to handle errors:
            - 'raise' raises the errors
            - 'show' prints them. if `mode = 'show'` and `verbose = True`,
               it also prints the error traceback
            - 'ignore' does nothing
        kwargs
            additional kwargs passed to `ReportClient`. see the docs for more information
        """
        self._owner_email_id = owner_email_id
        self.default_database_name = default_database_name
        self._errors = errors
        try:
            self.client = ReportClient(token = refresh_token, clientId = client_id, clientSecret = client_secret, default_retries = default_retries, **kwargs)
            logger.debug(f"Connection to Zoho Analytics '{self.default_database_name}' successful")
        except ValueError as ve:
            logger.error(f"Unable to connect to Zoho Analytics '{self.default_database_name}'")
            self._handle_error(ve, mode = self._errors, show_traceback = False)
            self.client = None

    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_value, traceback):
        # nothing to do here, as there is no connection to close
        # because we interact with the Zoho API
        pass

    def _handle_error(self, error, mode, show_traceback):
        # process error message, if necessary
        if type(error).__name__ == 'ValueError':
                error_message = error.args[-1]['error']
                error_message = 'invalid refresh token' if error_message == 'invalid_code' else re.sub('_', ' ', error_message)
                error_message = f"{error.args[0]}: '{error_message}'"
                error = ValueError(error_message)
        elif type(error).__name__ == 'ServerError':
            error_info = json.loads(re.sub('\\\\\'', r"'", error.message.decode()))['response']['error']
            error_message = f"Code {error_info['code']}: {error_info['message']}"
            error = ReadableServerError(error_message)

        # handle the error according to `mode`
        if mode == 'raise':
            raise error
        elif mode == 'show':
            logger.exception(f'{type(error).__name__}: {error}', exc_info = show_traceback)
        elif mode == 'ignore':
            pass
    
    def _make_query(self, query, table_name, database_name, retry_countdown, verbose = False, errors = 'show'):
        try:
            uri = self.client.getURI(
                dbOwnerName=self._owner_email_id, dbName=database_name or self.default_database_name, tableOrReportName=table_name
            )
            response_data = self.client.exportDataUsingSQL_v2(
                tableOrReportURI = uri, format = 'CSV', sql = query, retry_countdown = retry_countdown
            )
            logger.debug(f"Query to DB '{self.default_database_name}.{table_name}' successful")
            return response_data
        except ServerError as se:
            self._handle_error(se, mode = errors, show_traceback = verbose)
        except Exception as e:
            self._handle_error(e, mode = errors, show_traceback = True)
        
    def _handle_response(self, response_data):
        if response_data:
            response_data = response_data.getvalue().decode('utf-8').splitlines()
            return pd.DataFrame(csv.DictReader(response_data)).replace([''], [None])

        return pd.DataFrame([])
        
    def make_query(self, query, table_name = '', database_name = None, retry_countdown = 0, verbose = True, errors = None):
        """
        Make a query to the Zoho Analytics `table_name` table.
        The Zoho API insists on a table or report name to generate the corresponding API URI, but
        it does not affect the query. In fact, it doesn't even need to be an existing table.
        
        Parameters
        ----------
        query: str
            the SQL query
        table_name: str, optional
            again, the Zoho API insists on a table or report name to generate the corresponding API URI, 
            but it does not affect the query.
        database_name: str, optional
            name of the database where the queried table lives. if not given, it uses `self.default_database_name`
        retry_countdown: int, optional
            seconds to wait before a retry when exporting the queried data
        errors: str, optional
            how to handle errors: either 'raise'; 'show' 'ignore'. if given, it overrides self.errors
            
        Returns
        -------
        pandas.DataFrame
            a DataFrame (table) containg the query data
        """
        errors = errors or self._errors
        response_data = self._make_query(query, table_name, database_name, retry_countdown, verbose, errors)
        return self._handle_response(response_data)