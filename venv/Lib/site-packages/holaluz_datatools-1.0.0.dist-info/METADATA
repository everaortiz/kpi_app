Metadata-Version: 2.1
Name: holaluz-datatools
Version: 1.0.0
Summary: Holaluz BI team ETL tools
Home-page: https://github.com/holaluz/data-tools
Author: BI
Author-email: bi@holaluz.com
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8.5
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pyyaml (>=5.4.1)
Requires-Dist: google-auth (>=2.0.1)
Requires-Dist: slack-sdk (>=3.10.1)
Requires-Dist: pandas (>=1.5.0)
Requires-Dist: requests (>=2.24.0)
Requires-Dist: arrow (>=1.1.1)
Requires-Dist: xmltodict (>=0.12.0)
Requires-Dist: sqlalchemy (>=1.4.23)
Requires-Dist: psycopg2 (>=2.9.1)
Requires-Dist: mysqlpy (>=8.0.12)
Requires-Dist: pymysql (>=1.0.2)
Requires-Dist: greenlet (>=1.1.1)
Requires-Dist: snowflake-connector-python (>=2.7.12)
Requires-Dist: snowflake-sqlalchemy (>=1.3.1)
Requires-Dist: pyodbc (>=4.0.32)
Requires-Dist: gspread (>=4.0.1)
Requires-Dist: boto3 (>=1.17.76)
Requires-Dist: pyarrow (<8.1.0,>=8.0.0)
Requires-Dist: notion-py (>=0.0.10)
Requires-Dist: great-expectations (>=0.15.10)
Requires-Dist: python-dotenv (>=0.21)
Requires-Dist: pysftp (>=0.2.9)
Requires-Dist: more-itertools (>=9.0.0)

# Holaluz data tools

In this repo we have the Python package `holaluz_datatools`, which contains a wide variety of functions and classes that we use in our ETL processes.

For more information about what the package contains, see the [package readme](https://github.com/holaluz/data-tools/blob/main/holaluz_datatools/readme.md).

# How to install it
As this package has a lot of dependencies, we highly recommend to use it within a virtual environment, so it does not mess with your other packages versions. Moreover, this package needs a Python version greater or equal to 3.8, so if the Python version of your regular environment is older than that you won't be able to install it. 

If you need to upgrade your Python version, you can download it from the [miniconda repo](https://docs.conda.io/en/latest/miniconda.html), which is a minimal version of the Anaconda installer, or from the [official website](https://www.python.org/downloads/windows/).

## Creating a virtual environment
Just in case you don't know how to create a Python virtual environment, we outline how to do so. 

### Creating a virtual environment with `conda`
If you use Anaconda, just run
```python
    conda create -n <environment_name> python=<python_version>
```
then, activate it using
```python
    conda activate <environment_name>
```
and, finally, deactivate it using
```python
    conda deactivate
```

### Creating a virtual environment with `virtualenv`
Otherwise, you can use the Python built-in module `virtualenv`, which is installed by default on
versions >= 3.4. To create it, run
```python
    python -m venv path/<environment_name>
```
and then, to activate it,
```python
    # if using Windows
    cd path/<environment_name>/Scripts
    activate.bat

    # if using Linux
    source path/<environment_name>/bin/activate
```
and, finally, to deactivate it just type
```python
    deactivate
```

Notice that using `virtualenv` will only allow you to create environments with the Python versions of the Python binaries that you have downloaded, while conda allows to use any version on their repository.

## Installing the package
To install the package one needs to clone this repo, activate the virtual environment you might have created, and do a `pip install` (yes, even with conda).

For the installation process to be less abstract, let's see an installation example creating a virtual environment named `datatools` with the Python version 3.9. In addition, we assume the installation is done in a Windows machine, the user is names `bi`, and that the cloned repo is in `Documents/github/data-tools`,

### Installation example with `conda`
When using conda, we can create a virtual environment with any of the available Python versions. Assuming the environment will be located inside the `documents` directory, the `data-tools` package in `documents/github/data-tools` and the user name is `administrator`, we would install the package as follows
```python
# create the virtual environment
conda create -n datatools python=3.9 -y

# activate it
conda activate datatools

# install pip, if necessary
conda install -c conda-forge pip -y

# install datatools
cd users/administrator/documents/github/data-tools
pip install .
```

### Installation example with `virtualenv`
When using `virtualenv`, we can only create virtual environments with the Python versions of the executables we have downloaded. Under the same assumptions as before, we could install the package as follows
```python
# install virtualenv, if necessary
pip install virtualenv --user

# create the virtual environment
cd /users/administrator/documents
python -m venv datatools

# activate it (assuming you are on a Windows OS)
cd datatools/Scripts/
activate.bat

# install datatools
cd users/administrator/documents/github/data-tools
pip install .
```

## Creating the credentials folder
To help preventing hardcoded credentials, the `holaluz_datatools` package has custom functions to load them from either environment variables, AWS Secrets Manager and local files. To know about more them, check the corresponding [readme](https://github.com/holaluz/data-tools/blob/main/holaluz_datatools/credentials/readme.md).

### AWS creds
When loading the credentials from the AWS Secrets Manager, the loader searches for an AWS API keys (`aws_acces_key` and `aws_secret_key`) in the default AWS CLI credentials file, i.e., `~/.aws/credentials` or `/users/<user_name>/.aws/credentials`. 

Thus, if AWS CLI is not installed and configured, one must create the `.aws` folder and place her AWS credentials in the `credentials` file after installing the `holaluz_datatools` package.

### Local file
As as alternative (and lower-ranking) method, one can load the credentials from a local file. By default, `holaluz_datatools` searches for the file `~/creds/creds.yaml` or `/users/<user_name>/creds/creds.yaml`, depending on your OS.
